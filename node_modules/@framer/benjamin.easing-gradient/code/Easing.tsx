import * as React from "react"
import {
    Frame,
    Color,
    ColorMixModelType,
    addPropertyControls,
    ControlType,
} from "framer"
import { cubicCoordinates, stepsCoordinates } from "easing-coordinates"

export function Easing({
    from,
    to,
    angle,
    stops,
    mode,
    radius,
    easeString,
    easeCustom,
    easing,
}) {
    let coordinates
    const customBezier = easeCustom.split(",").map(Number)

    if (easeString) {
        if (easing === "steps") {
            coordinates = stepsCoordinates(stops, "skip-none")
        } else {
            const { x1, y1, x2, y2 } = easeMap[easing]
            coordinates = cubicCoordinates(x1, y1, x2, y2, stops)
        }
    } else {
        coordinates = cubicCoordinates(
            customBezier[0],
            customBezier[1],
            customBezier[2],
            customBezier[3],
            stops
        )
    }

    const allStops = coordinates.map(({ x, y }) => {
        const startColor = Color(from)
        const endColor = Color(to)

        let colorMode = ColorMixModelType.HSLA

        if (mode === "hsla") {
            colorMode = ColorMixModelType.HSLA
        }

        if (mode === "rgba") {
            colorMode = ColorMixModelType.RGBA
        }

        if (mode === "husl") {
            colorMode = ColorMixModelType.HUSL
        }

        const blend = Color.interpolate(startColor, endColor, colorMode)
        const color = Color.toHslString(blend(y))

        return `${color} ${(x * 100).toFixed(2)}%`
    })

    return (
        <Frame
            width="100%"
            height="100%"
            radius={radius}
            background={`linear-gradient(${angle}deg, ${allStops.join(", ")})`}
        ></Frame>
    )
}

Easing.defaultProps = {
    from: "#0CF",
    to: "#F0C",
    angle: 45,
    stops: 5,
    easeString: true,
    easing: "ease-in",
    mode: "husl",
    radius: 0,
    easeCustom: "0.645, 0.045, 0.355, 1",
}

addPropertyControls(Easing, {
    from: {
        type: ControlType.Color,
        title: "Start",
    },
    to: {
        type: ControlType.Color,
        title: "End",
    },
    angle: {
        type: ControlType.Number,
        title: "Angle",
        min: 0,
        max: 360,
        unit: "Â°",
    },
    stops: {
        type: ControlType.Number,
        title: "Stops",
        max: 100,
        min: 2,
        displayStepper: true,
    },
    easeString: {
        type: ControlType.Boolean,
        title: "Ease",
        enabledTitle: "Preset",
        disabledTitle: "Custom",
    },
    easing: {
        type: ControlType.Enum,
        title: "Preset",
        hidden(props) {
            return props.easeString === false
        },
        options: [
            "linear",
            "ease",
            "ease-in",
            "ease-out",
            "ease-in-out",
            "steps",
        ],
        optionTitles: [
            "Linear",
            "Ease",
            "Ease In",
            "Ease Out",
            "Ease In Out",
            "Steps",
        ],
    },
    easeCustom: {
        type: ControlType.String,
        title: "Bezier",
        placeholder: "Cubic Bezier Values",
        hidden(props) {
            return props.easeString === true
        },
    },
    mode: {
        type: ControlType.Enum,
        title: "Mode",
        options: ["hsla", "husl", "rgba"],
        optionTitles: ["HSLA", "HUSL", "RGBA"],
    },
    radius: {
        type: ControlType.Number,
        title: "Radius",
        min: 0,
        max: 1000,
    },
})

const easeMap = {
    "ease-in-out": {
        x1: 0.42,
        y1: 0,
        x2: 0.58,
        y2: 1,
    },
    "ease-out": {
        x1: 0,
        y1: 0,
        x2: 0.58,
        y2: 1,
    },
    "ease-in": {
        x1: 0.42,
        y1: 0,
        x2: 1,
        y2: 1,
    },
    ease: {
        x1: 0.25,
        y1: 0.1,
        x2: 0.25,
        y2: 1,
    },
    linear: {
        x1: 0.25,
        y1: 0.25,
        x2: 0.75,
        y2: 0.75,
    },
}

import * as React from "react"
import { Frame, addPropertyControls, ControlType, Color } from "framer"
import { colors } from "./canvas"
// @ts-ignore
import styled, { css } from "styled-components"

const StyledButton = styled.div`
    border: 0px;
    border-radius: 5px;
    width: 100%;
    padding: 0px;
    height: 64px;
    cursor: pointer;

    ${props =>
        props.primary &&
        css`
    background-color: ${colors.mainBlue};
    
    ${props =>
        props.enabled &&
        css`
    color: white;
    box-shadow: 0 6px 12px rgba(0,0,0,0.15);

    &:hover {
        box-shadow: 0 8px 16px rgba(0,0,0,0.15); 
        background-color: ${colors.hoverBlue};
        margin: -.5px 0 0 0;
        
    }
    &:active {
        box-shadow: 0 4px 8px rgba(0,0,0,0.15); 
        background-color: ${colors.mainBlue};
        margin: 0px 0 0 0;
    }
  `}

  ${props =>
      props.disabled &&
      css`
    color: rgba(255,255,255,0.7);
    box-shadow: 0 0 0 rgba(0,0,0,0.15);
  `}

`}

${props =>
    props.secondary &&
    css`
    background-color: white;
    
    ${props =>
        props.enabled &&
        css`
    color: ${colors.darkGrey};
    box-shadow: 0 6px 12px rgba(0,0,0,0.15);

    &:hover {
        box-shadow: 0 8px 16px rgba(0,0,0,0.15); 
        background-color: #fafafa;
        margin: -.5px 0 0 0;
    }
    &:active {
        box-shadow: 0 4px 8px rgba(0,0,0,0.15); 
        background-color: white;
        margin: 0px 0 0 0;
    }
  `}

  ${props =>
      props.disabled &&
      css`
    color: rgba(255,255,255,0.7);
    box-shadow: 0 0 0 rgba(0,0,0,0.15);
    border: 1px solid ${colors.lightGrey};
  `}

`}
`

const StyledButtonText = styled.h2`
    font-family: Rubik;
    font-size: 18px;
    font-weight: 500;
    text-align: center;
    padding: 18px 12px;
    letter-spacing: 1px;
`

const StyledIconContainer = styled.div`
  display: flex;
  position: absolute;
  width: 100%;
  height: 64px;
  align-items: center;
  justify-content: center;
  color: ${props => (props.color ? props.color : "red")};

  i {
    font-size: ${props => (props.stretch ? props.height : 24)}px !important;
  }
`

export function MainButton(props) {
    return (
        <div>
            {props.enabled ? (
                props.primary ? (
                    <StyledButton enabled primary>
                        <StyledIconContainer
                            height={props.iconSize}
                            stretch={true}
                            color="white"
                        >
                            <i className="material-icons mdc-button__icon">
                                {props.icon}
                            </i>
                            <StyledButtonText>
                                {props.text.toUpperCase()}
                            </StyledButtonText>
                        </StyledIconContainer>
                    </StyledButton>
                ) : (
                    <StyledButton enabled secondary>
                        <StyledIconContainer
                            height={props.iconSize}
                            stretch={true}
                            color={colors.darkGrey}
                        >
                            <i className="material-icons mdc-button__icon">
                                {props.icon}
                            </i>
                            <StyledButtonText>
                                {props.text.toUpperCase()}
                            </StyledButtonText>
                        </StyledIconContainer>
                    </StyledButton>
                )
            ) : props.primary ? (
                <StyledButton disabled primary>
                    <StyledIconContainer
                        height={props.iconSize}
                        stretch={true}
                        color={"rgba(255, 255, 255, 0.7)"}
                    >
                        <i className="material-icons mdc-button__icon">
                            {props.icon}
                        </i>
                        <StyledButtonText>
                            {props.text.toUpperCase()}
                        </StyledButtonText>
                    </StyledIconContainer>
                </StyledButton>
            ) : (
                <StyledButton disabled secondary>
                    <StyledIconContainer
                        height={props.iconSize}
                        stretch={true}
                        color={colors.lightGrey}
                    >
                        <i className="material-icons mdc-button__icon">
                            {props.icon}
                        </i>
                        <StyledButtonText>
                            {props.text.toUpperCase()}
                        </StyledButtonText>
                    </StyledIconContainer>
                </StyledButton>
            )}
        </div>
    )
}

MainButton.defaultProps = {
    height: 64,
    width: 240,
    text: "I'm a button!",
    icon: "send",
    iconSize: 24,
    enabled: true,
    primary: true,
}

addPropertyControls(MainButton, {
    text: {
        title: "Text",
        type: ControlType.String,
        defaultValue: "I'm a button!",
    },
    icon: {
        title: "Icon",
        type: ControlType.String,
        defaultValue: "send",
    },
    // iconSize: {
    //     title: "Icon Size",
    //     type: ControlType.Number,
    //     defaultValue: 18,
    // },
    primary: {
        title: "Type",
        type: ControlType.Boolean,
        defaultValue: true,
        enabledTitle: "Primary",
        disabledTitle: "Secondary",
    },
    enabled: {
        title: "Enabled",
        type: ControlType.Boolean,
        defaultValue: true,
        enabledTitle: "Enabled",
        disabledTitle: "Disabled",
    },
})

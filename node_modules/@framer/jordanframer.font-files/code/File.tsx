import * as React from "react"
import { Frame, addPropertyControls, ControlType, RenderTarget } from "framer"

////////////////////////////////////////////////////////////////////////////////
// TODO
////////////////////////////////////////////////////////////////////////////////

// * Manage Framer Web
// * Add Individual Web Url Files
// * Clean Up filename output - When loaded from Web

////////////////////////////////////////////////////////////////////////////////
// CSS Font Rule

function fontCss(name, path) {
    return `
    @font-face {
        font-family: '${name}';
        src: url(${path});
        font-weight: 900;
    }`
}

////////////////////////////////////////////////////////////////////////////////
// CONSTANTS

const MSG_FONT_NAME = "⚠️ Add font CSS name."
const MSG_FONT_FILE = "💾 Include a file for this font."
const THUMB_NAME_TEXT = "Font "
const THUMB_FILE_TEXT = ""

////////////////////////////////////////////////////////////////////////////////
// File Component
////////////////////////////////////////////////////////////////////////////////

export function File(props) {
    ////////////////////////////////////////////////////////////////////////////////
    // Environment Variables

    const isThumbnail = RenderTarget.current() === RenderTarget.thumbnail
    const isCanvas = RenderTarget.current() === RenderTarget.canvas
    const isFramerWebShare = document.location.href.match(/^.+(\/ui\/run.html)/)
    // TODO: const isFramerWebCanvas = document.location.href.match()

    ////////////////////////////////////////////////////////////////////////////////
    // Props / State / Ref Hook

    const { cssName, filePath } = props

    const [id] = React.useState(props.id)
    const styleTag = React.useRef(null)

    ////////////////////////////////////////////////////////////////////////////////
    // Variables

    // Text sizing
    const fontSize = isThumbnail ? 120 : 24
    const lineHeight = isThumbnail ? 42 : 24
    const textColor = isThumbnail ? "#808080" : "#ffffff"

    // Font Name & Path
    let name = cssName
    let file = filePath
    let fileName = filePath.replace(/^.+\//g, "")
    let scrubbedPath = filePath.replace("/preview", "")

    // Adjust for Environment
    scrubbedPath = isFramerWebShare ? `../${scrubbedPath}` : scrubbedPath
    file = fileName // TODO: Update for web

    ////////////////////////////////////////////////////////////////////////////////
    // Style DOM Node

    // Check for style tag Ref, if none, use existing style element or create one
    if (!styleTag.current) {
        const dom = document.getElementById(props.id)
        if (dom) {
            styleTag.current = dom
        } else {
            styleTag.current = document.createElement("style")
            styleTag.current.id = id
            document.head.appendChild(styleTag.current)
        }
    }

    ////////////////////////////////////////////////////////////////////////////////
    // Lifecycle

    // Props Change on cssName or filePath
    React.useEffect(() => {
        const css = isCanvas ? "" : fontCss(cssName, scrubbedPath)
        styleTag.current.appendChild(document.createTextNode(css))
        return () => {
            if (styleTag.current) styleTag.current.innerHTML = ""
        }
    }, [cssName, filePath])

    // Remove style tag on unMount
    React.useEffect(() => {
        return () => {
            if (styleTag.current)
                try {
                    // Might not exist, it's fine we want to remove it anyway
                    // Just don't throw an error
                    document.head.removeChild(styleTag.current)
                } catch (error) {}
        }
    }, [])

    ////////////////////////////////////////////////////////////////////////////////
    // Empty & Thumbnail Display

    // Handle Incomplete Components
    if (name === "") name = MSG_FONT_NAME
    if (file === "") file = MSG_FONT_FILE

    // Handle Thumbnail
    if (isThumbnail) name = THUMB_NAME_TEXT
    if (isThumbnail) file = THUMB_FILE_TEXT

    ////////////////////////////////////////////////////////////////////////////////
    // Styles

    // Styles for Canvas Preview
    const ellipsisStyle: React.CSSProperties = {
        whiteSpace: "nowrap",
        overflow: "hidden",
        textOverflow: "ellipsis",
    }

    const cssFontFamily =
        isThumbnail || cssName === "" ? cssName : CSS.escape(name)

    const nameStyle: React.CSSProperties = {
        fontFamily: cssFontFamily,
        fontSize: fontSize,
        lineHeight: `${lineHeight}px`,
        color: textColor,
        padding: "24px",
        ...ellipsisStyle,
    }

    const fileStyle: React.CSSProperties = {
        display: "block",
        fontSize: ".5em",
        marginTop: ".5em",
        opacity: 0.5,
        ...ellipsisStyle,
    }

    ////////////////////////////////////////////////////////////////////////////////
    // Component Render

    return (
        <Frame
            size={"100%"}
            background={isThumbnail ? "" : "#000"}
            style={nameStyle}
            radius={8}
        >
            {name}
            <code style={fileStyle}>{file}</code>
            <br />
        </Frame>
    )
}

////////////////////////////////////////////////////////////////////////////////
// React Default Properties - Used by Framer Canvas and Property Panel

File.defaultProps = {
    height: 100,
    width: 300,
    cssName: "",
    filePath: "",
}

////////////////////////////////////////////////////////////////////////////////
// Framer Property Controls

addPropertyControls(File, {
    cssName: {
        title: "CSS Name",
        type: ControlType.String,
        defaultValue: File.defaultProps.cssName,
    },
    filePath: {
        title: "Font File",
        type: ControlType.File,
        allowedFileTypes: ["ttf", "woff", "otf", "eot", "woff2"],
    },
})

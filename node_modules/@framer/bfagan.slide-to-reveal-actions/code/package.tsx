import * as React from "react";
import {
    Frame,
    Stack,
    ControlType,
    addPropertyControls,
    useAnimation,
    motionValue
} from "framer";
import * as IconFeather from "react-feather";

// Structure
export function SwipeActions(props) {
    // Setup for snapping behaviour onDragEnd
    let dragWidthRight = -props.numberOfActions * props.actionWidth;
    let dragWidthLeft = props.numberOfActions * props.actionWidth;

    let dragReset = {
        x: 0,
        transition:
            props.animationType !== "spring"
                ? { ease: props.animationType, duration: props.easeDuration }
                : {
                      type: "spring",
                      damping: props.springDamping,
                      stiffness: props.springStiffness
                  }
    };
    let dragFullRight = {
        x: dragWidthRight,
        transition:
            props.animationType !== "spring"
                ? { ease: props.animationType, duration: props.easeDuration }
                : {
                      type: "spring",
                      damping: props.springDamping,
                      stiffness: props.springStiffness
                  }
    };
    let dragFullLeft = {
        x: dragWidthLeft,
        transition:
            props.animationType !== "spring"
                ? { ease: props.animationType, duration: props.easeDuration }
                : {
                      type: "spring",
                      damping: props.springDamping,
                      stiffness: props.springStiffness
                  }
    };

    const controls = useAnimation();
    const contentOffsetX = motionValue(0);

    // Format strings for feather
    let strInputIcn1 =
        props.action1Icon.slice(0, 1).toUpperCase() +
        props.action1Icon.slice(1, props.action1Icon.length);
    let strInputIcn2 =
        props.action2Icon.slice(0, 1).toUpperCase() +
        props.action2Icon.slice(1, props.action2Icon.length);
    let strInputIcn3 =
        props.action3Icon.slice(0, 1).toUpperCase() +
        props.action3Icon.slice(1, props.action3Icon.length);

    const Icn1 = IconFeather[strInputIcn1];
    const Icn2 = IconFeather[strInputIcn2];
    const Icn3 = IconFeather[strInputIcn3];

    return (
        <Frame
            name={"Master Container"}
            width={props.width}
            height={props.height}
            background={null}
        >
            {/* Square Actions */}
            <Stack
                width={"100%"}
                height={"100%"}
                direction={"horizontal"}
                distribution={props.actionAlign ? "start" : "end"}
                gap={0}
                visible={props.actionShape ? false : true}
            >
                {/* Action 3 */}
                <ActionSquare
                    visible={props.numberOfActions >= 3 ? true : false}
                    width={props.actionWidth}
                    color={props.action3Color}
                    iconSize={props.iconSize}
                    iconName={<Icn3 color={"white"} size={props.iconSize} />}
                />
                {/* Action 2 */}
                <ActionSquare
                    visible={props.numberOfActions >= 2 ? true : false}
                    width={props.actionWidth}
                    color={props.action2Color}
                    iconSize={props.iconSize}
                    iconName={<Icn2 color={"white"} size={props.iconSize} />}
                />
                {/* Action 1 */}
                <ActionSquare
                    visible={props.numberOfActions >= 1 ? true : false}
                    width={props.actionWidth}
                    color={props.action1Color}
                    iconSize={props.iconSize}
                    iconName={<Icn1 color={"white"} size={props.iconSize} />}
                />
            </Stack>
            {/* Circle Actions */}
            <Stack
                width={"100%"}
                height={"100%"}
                direction={"horizontal"}
                distribution={props.actionAlign ? "start" : "end"}
                gap={props.actionSpacing}
                visible={props.actionShape ? true : false}
            >
                {/* Action 3 */}
                <ActionCircle
                    visible={props.numberOfActions >= 3 ? true : false}
                    size={props.containerSize}
                    color={props.action3Color}
                    iconSize={props.iconSize}
                    iconName={<Icn3 color={"white"} size={props.iconSize} />}
                />
                {/* Action 2 */}
                <ActionCircle
                    visible={props.numberOfActions >= 2 ? true : false}
                    size={props.containerSize}
                    color={props.action2Color}
                    iconSize={props.iconSize}
                    iconName={<Icn2 color={"white"} size={props.iconSize} />}
                />
                {/* Action 1 */}
                <ActionCircle
                    visible={props.numberOfActions >= 1 ? true : false}
                    size={props.containerSize}
                    color={props.action1Color}
                    iconSize={props.iconSize}
                    iconName={<Icn1 color={"white"} size={props.iconSize} />}
                />
            </Stack>
            {/* Draggable Frame Left Alignment */}
            <Frame
                width={props.width}
                height={"100%"}
                background={null}
                drag={"x"}
                dragConstraints={{ left: 0 }}
                dragElastic={0}
                animate={controls}
                x={contentOffsetX}
                visible={props.actionAlign ? true : false}
                onDrag={() => {
                    // console.log(contentOffsetX.get());
                }}
                onDragEnd={function() {
                    if (contentOffsetX.get() < dragWidthLeft / 2) {
                        controls.start(dragFullLeft);
                    } else if (contentOffsetX.get() > dragWidthLeft / 2) {
                        controls.start(dragFullLeft);
                    }
                }}
            >
                {/* This resizes the linked frame when manipulating component on canvas */}
                {React.Children.map(props.topFrame, child => {
                    return React.cloneElement(child, { width: "100%" });
                })}
            </Frame>
            {/* Draggable Frame Left Alignment */}
            <Frame
                width={props.width}
                height={"100%"}
                background={null}
                drag={"x"}
                dragConstraints={{ right: 0 }}
                dragElastic={0}
                animate={controls}
                x={contentOffsetX}
                visible={!props.actionAlign ? true : false}
                onDrag={() => {
                    // console.log(contentOffsetX.get());
                }}
                onDragEnd={function() {
                    if (contentOffsetX.get() > dragWidthRight / 2) {
                        controls.start(dragReset);
                    } else if (contentOffsetX.get() < dragWidthRight / 2) {
                        controls.start(dragFullRight);
                    }
                }}
            >
                {/* This resizes the linked frame when manipulating component on canvas */}
                {React.Children.map(props.topFrame, child => {
                    return React.cloneElement(child, { width: "100%" });
                })}
            </Frame>
        </Frame>
    );
}

// Create Action Square
function ActionSquare({ width, color, visible, iconSize, iconName }) {
    return (
        <Frame
            height={"100%"}
            width={width}
            backgroundColor={color}
            visible={visible}
        >
            <Stack
                width={"100%"}
                size={iconSize}
                backgroundColor={"none"}
                direction={"vertical"}
                distribution={"center"}
                gap={1}
                center
            >
                <Frame
                    width={iconSize}
                    height={iconSize}
                    backgroundColor={"none"}
                >
                    {iconName}
                </Frame>
            </Stack>
        </Frame>
    );
}

// Create Action Circle
function ActionCircle({ size, color, visible, iconSize, iconName }) {
    return (
        <Frame
            size={size}
            backgroundColor={color}
            visible={visible}
            borderRadius={size / 2}
        >
            <Stack
                width={size}
                height={size}
                backgroundColor={"none"}
                direction={"vertical"}
                distribution={"center"}
                gap={1}
                center
            >
                <Frame
                    width={iconSize}
                    height={iconSize}
                    backgroundColor={"none"}
                >
                    {iconName}
                </Frame>
            </Stack>
        </Frame>
    );
}

// Default Props
SwipeActions.defaultProps = {
    width: 375,
    height: 72,
    action1Color: "#0055FF",
    action2Color: "#4400FF",
    action3Color: "#6600FF",
    action1Icon: "Cloud",
    action2Icon: "Download",
    action3Icon: "Trash"
};

// Property Controls
addPropertyControls(SwipeActions, {
    // Link to frame
    topFrame: {
        title: "Top Frame",
        type: ControlType.ComponentInstance
    },

    // Animation controls
    animationType: {
        type: ControlType.Enum,
        title: "Animation",
        defaultValue: "spring",
        options: ["spring", "easeIn", "easeOut", "easeInOut", "linear"],
        optionTitles: ["Spring", "Ease-In", "Ease-Out", "Ease-In-Out", "Linear"]
    },

    // Ease controls
    easeDuration: {
        type: ControlType.Number,
        title: "Duration",
        defaultValue: 0.2,
        min: 0,
        max: 1,
        step: 0.1,
        displayStepper: true,
        hidden(props) {
            return props.animationType === "spring";
        }
    },

    // Spring controls
    springDamping: {
        type: ControlType.Number,
        title: "Damping",
        defaultValue: 100,
        min: 10,
        max: 100,
        step: 1,
        hidden(props) {
            return props.animationType !== "spring";
        }
    },

    springStiffness: {
        type: ControlType.Number,
        title: "Stiffness",
        defaultValue: 1000,
        min: 100,
        max: 1000,
        step: 1,
        hidden(props) {
            return props.animationType !== "spring";
        }
    },

    // Set number of actions
    numberOfActions: {
        type: ControlType.Number,
        title: "Actions",
        defaultValue: 1,
        min: 1,
        max: 3,
        step: 1,
        displayStepper: true
    },

    // Container shape
    actionShape: {
        type: ControlType.Boolean,
        title: "Shape",
        defaultValue: false,
        enabledTitle: "Circle",
        disabledTitle: "Square"
    },

    // Icon spacing
    actionSpacing: {
        type: ControlType.Number,
        title: "Icon Spacing",
        defaultValue: 8,
        min: 4,
        max: 32,
        step: 1,
        hidden(props) {
            return props.actionShape === false;
        }
    },

    // Set width of action items
    actionWidth: {
        type: ControlType.Number,
        title: "Action Width",
        defaultValue: 72,
        min: 24,
        max: 124,
        step: 1,
        hidden(props) {
            return props.actionShape === true;
        }
    },

    // Alignment
    actionAlign: {
        type: ControlType.Boolean,
        title: "Alignment",
        defaultValue: false,
        enabledTitle: "Left",
        disabledTitle: "Right"
    },

    // Set icon size
    containerSize: {
        type: ControlType.Number,
        title: "Container",
        defaultValue: 40,
        min: 16,
        max: 56,
        step: 1,
        hidden(props) {
            return props.actionShape === false;
        }
    },

    // Set icon size
    iconSize: {
        type: ControlType.Number,
        title: "Icon",
        defaultValue: 18,
        min: 16,
        max: 28,
        step: 1
    },

    // Action 1
    action1Color: {
        type: ControlType.Color,
        title: "A1 Color",
        hidden(props) {
            return props.numberOfActions < 1;
        }
    },
    action1Icon: {
        type: ControlType.String,
        title: "A1 Icon",
        hidden(props) {
            return props.numberOfActions < 1;
        }
    },

    // Action 2
    action2Color: {
        type: ControlType.Color,
        title: "A2 Color",
        hidden(props) {
            return props.numberOfActions < 2;
        }
    },
    action2Icon: {
        type: ControlType.String,
        title: "A2 Icon",
        hidden(props) {
            return props.numberOfActions < 2;
        }
    },

    // Action 3
    action3Color: {
        type: ControlType.Color,
        title: "A3 Color",
        hidden(props) {
            return props.numberOfActions < 3;
        }
    },
    action3Icon: {
        type: ControlType.String,
        title: "A3 Icon",
        hidden(props) {
            return props.numberOfActions < 3;
        }
    }
});

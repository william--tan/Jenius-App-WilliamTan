import * as React from "react"
import {
    Frame,
    motion,
    Point,
    Draggable,
    PropertyControls,
    ControlType,
    Color,
} from "framer"
// @ts-ignore
import { Icon } from "@framer/benjamin.icon-generator/code/Icon"

interface Props {
    value: number
    onValueChange: (value: number) => void
    knob: string
    track: string
    tint: string
    width: number
    height: number
    min: number
    max: number
    knobSize: number
    shadow: number
    trackHeight: number
    left: number
    constrained: boolean
}

interface State {
    value: number
    propsValue: number
    knobOffset: number
}

const modulate = (value, r1, r2) => {
    return ((value - r1[0]) * (r2[1] - r2[0])) / (r1[1] - r1[0]) + r2[0]
}

class HueSlider extends React.Component<Partial<Props>, State> {
    static defaultProps = {
        width: 120,
        height: 44,
        value: 50,
        knob: "white",
        track: "#DDD",
        tint: "#09F",
        min: 0,
        max: 100,
        knobSize: 30,
        shadow: "rgba(0,0,0,0.1)",
        trackHeight: 2,
        constrained: false,
    }

    static propertyControls: PropertyControls<Props> = {
        tint: { type: ControlType.Color, title: "Tint" },
        track: { type: ControlType.Color, title: "Track" },
        shadow: { type: ControlType.Color, title: "Shadow" },
        min: { type: ControlType.Number, title: "Min", min: 0 },
        max: { type: ControlType.Number, title: "Max", min: 0, max: 360 },
        value: { type: ControlType.Number, title: "Value", min: 0, max: 360 },
        knobSize: { type: ControlType.Number, title: "Knob", min: 20, max: 50 },
        trackHeight: {
            type: ControlType.Number,
            title: "Height",
            min: 1,
            max: 10,
        },
        constrained: { type: ControlType.Boolean, title: "Constrain" },
    }

    state = {
        value: HueSlider.defaultProps.value,
        propsValue: HueSlider.defaultProps.value,
        knobOffset: 0,
    }

    componentDidMount() {
        const { value, onValueChange } = this.props
        this.setState({ value })

        if (onValueChange) {
            onValueChange(value)
        }
    }

    static getDerivedStateFromProps(props: Props, state: State) {
        return {
            propsValue: props.value,
            value: props.value !== state.propsValue ? props.value : state.value,
        }
    }

    onMove = (event: Point) => {
        const { onValueChange } = this.props
        const value = this.pointToValue(event.x)
        this.setState({ value })

        if (onValueChange) {
            onValueChange(value)
        }
    }

    onClick = event => {
        // const { knobSize, onValueChange, max, min } = this.props
        // let value = this.pointToValue(event.point.x - knobSize / 2)
        // if (value < min) {
        //     value = min
        // } else if (value > max) {
        //     value = max
        // }
        // this.setState({ value })
        // if (onValueChange) {
        //     onValueChange(value)
        // }
    }

    valueToPoint = value => {
        const { min, max, width, constrained, knobSize } = this.props
        if (constrained) {
            return modulate(value, [min, max], [0, width - knobSize])
        } else {
            return modulate(
                value,
                [min, max],
                [-knobSize / 2, width - knobSize / 2]
            )
        }
    }

    pointToValue = point => {
        const { min, max, width, constrained, knobSize } = this.props
        if (constrained) {
            return modulate(point, [0, width - knobSize], [min, max])
        } else {
            return modulate(
                point,
                [-knobSize / 2, width - knobSize / 2],
                [min, max]
            )
        }
    }

    render() {
        const {
            knob,
            track,
            tint,
            width,
            height,
            knobSize,
            trackHeight,
            constrained,
            min,
            max,
        } = this.props

        let left = this.valueToPoint(max)
        let ratio = (left + knobSize / 2) / width

        if (this.state.value < max) {
            left = this.valueToPoint(this.state.value)
            ratio = (left + knobSize / 2) / width
        }
        if (min > this.state.value) {
            ratio = this.valueToPoint(min) / width
            left = this.valueToPoint(min)
        }

        if (min === max && max < this.state.value) {
            ratio = 1
            if (constrained) {
                left = width - knobSize
            } else {
                left = width - knobSize / 2
            }
        }

        if (
            (min === max && max > this.state.value) ||
            (min === max && min === this.state.value)
        ) {
            ratio = 0
            if (constrained) {
                left = 0
            } else {
                left = -knobSize / 2
            }
        }

        const constraintsX = constrained ? 0 : -knobSize / 2
        const constraintsWidth = constrained ? width : width + knobSize

        if (ratio > 1) {
            ratio = 1
        } else if (ratio < 0) {
            ratio = 0
        }

        const constraints = {
            x: constraintsX,
            y: height / 2 - knobSize / 2,
            width: constraintsWidth,
            height: knobSize,
        }

        return (
            <>
                <Frame
                    left={0}
                    height={trackHeight}
                    width={width}
                    top={(height - trackHeight) / 2}
                    background={
                        "-webkit-linear-gradient(left, hsl(0, 100%, 50%), hsl(22.5, 100%, 50%), hsl(45, 100%, 50%), hsl(67.5, 100%, 50%), hsl(90, 100%, 50%), hsl(112.5, 100%, 50%), hsl(135, 100%, 50%), hsl(157.5, 100%, 50%), hsl(180, 100%, 50%), hsl(202.5, 100%, 50%), hsl(225, 100%, 50%), hsl(247.5, 100%, 50%), hsl(270, 100%, 50%), hsl(292.5, 100%, 50%), hsl(315, 100%, 50%), hsl(337.5, 100%, 50%))"
                    }
                    radius={50}
                    onClick={this.onClick}
                    overflow={"hidden"}
                >
                    <Frame
                        width={`${ratio * 100}%`}
                        top={0}
                        left={0}
                        bottom={0}
                        background={tint}
                        radius={50}
                    />
                </Frame>
                <Draggable
                    width={knobSize}
                    height={knobSize}
                    constraints={constraints}
                    bounce={false}
                    overdrag={false}
                    onMove={this.onMove}
                    horizontal={true}
                    vertical={false}
                    left={left}
                    top={height / 2 - this.props.knobSize / 2}
                    background={knob}
                    radius={"50%"}
                    shadows={[
                        {
                            inset: false,
                            color: `${this.props.shadow}`,
                            x: 0,
                            y: 1,
                            blur: 2,
                            spread: 0,
                        },
                        {
                            inset: false,
                            color: `${this.props.shadow}`,
                            x: 0,
                            y: 2,
                            blur: 4,
                            spread: 0,
                        },
                        {
                            inset: false,
                            color: `${this.props.shadow}`,
                            x: 0,
                            y: 4,
                            blur: 8,
                            spread: 0,
                        },
                    ]}
                />
            </>
        )
    }
}

const customTransition = { type: "spring", stiffness: 300, damping: 40 }

function Controller({
    darkMode,
    accentColor: rawAccentColor,
    toggleDarkMode,
    setAccentColor,
}) {
    const accentHue = Color.toHsl(Color(rawAccentColor)).h
    const prevColor = React.useRef(accentHue)
    const accentColor = `hsl(${Math.floor(accentHue)},100%, 50%)`
    const onHueChange = value => {
        if (Math.abs(prevColor.current - value) > 10)
            setAccentColor(`hsl(${Math.floor(value)},100%, 50%)`)

        prevColor.current = accentHue
    }

    return (
        <Frame
            animate={{
                backgroundColor: accentColor,
            }}
            transition={customTransition}
            initial={false}
            size={"100%"}
        >
            <Frame
                size="100%"
                background={
                    "linear-gradient(151deg, rgba(0, 0, 0, 0) 0%, rgba(0, 0, 0, 0.08) 100%)"
                }
            />
            <Frame
                center
                animate={{
                    background: darkMode ? "#1A1A1A" : "#ffffff",
                }}
                transition={customTransition}
                initial={false}
                style={{
                    position: "absolute",
                    width: "480px",
                    height: "229px",
                    backgroundColor: "#ffffff",
                    borderRadius: "20px",
                    boxShadow:
                        "0px 22px 85px 0px rgba(92, 38, 0, 0.18), inset 0px 0px 1px 1px hsla(0, 0%, 9%, 0.12), 0px 72px 75px -40px rgba(0, 0, 0, 0.04)",
                }}
            >
                {/* Title */}
                <motion.h1
                    animate={{
                        color: darkMode ? "#ffffff" : "#000000",
                    }}
                    transition={customTransition}
                    initial={false}
                    style={{
                        fontFamily: `".SFNSDisplay-Bold", "SFProDisplay-Bold", "SFUIDisplay-Bold", ".SFUIDisplay-Bold", sans-serif`,
                        color: "#000",
                        fontSize: "36px",
                        letterSpacing: "-0.2px",
                        margin: 0,
                        lineHeight: 1.2,
                        position: "absolute",
                        top: 34,
                        left: 96,
                    }}
                >
                    Controller
                </motion.h1>

                {/* TopLeft Circle */}
                <Frame
                    animate={{
                        backgroundColor: accentColor,
                    }}
                    transition={customTransition}
                    initial={false}
                    style={{
                        top: 32,
                        left: 32,
                        width: "48px",
                        height: "48px",
                        borderRadius: "50px",
                    }}
                >
                    <Frame center size={24} background={null}>
                        <Icon
                            height={24}
                            width={24}
                            color="#fff"
                            set="feather"
                            icon="radio"
                        />
                    </Frame>
                </Frame>

                {/* Divider */}
                <Frame
                    transition={customTransition}
                    animate={{
                        background: darkMode
                            ? "rgba(255, 255, 255, 0.06)"
                            : "rgba(0, 0, 0, 0.03)",
                    }}
                    initial={false}
                    style={{
                        width: "480px",
                        height: "1px",
                        backgroundColor: "rgba(0, 0, 0, 0.03)",
                        top: 112,
                    }}
                />

                {/* Switch */}
                <Frame
                    onTap={toggleDarkMode}
                    transition={customTransition}
                    animate={{
                        background: darkMode ? "#2e2e2e" : accentColor,
                    }}
                    initial={false}
                    style={{
                        width: "100px",
                        height: "52px",
                        borderRadius: "40px",
                        bottom: 32,
                        left: 32,
                    }}
                >
                    <Frame
                        center="y"
                        size={24}
                        background={null}
                        left={15}
                        transition={customTransition}
                        originX={0.4}
                        originY={0.5}
                        animate={{
                            scale: darkMode ? 0.8 : 1,
                            opacity: darkMode ? 0 : 1,
                            rotate: darkMode ? -20 : 0,
                        }}
                        initial={false}
                    >
                        <Icon
                            height={24}
                            width={24}
                            color="#fff"
                            set="feather"
                            icon="sun"
                        />
                    </Frame>

                    <Frame
                        center="y"
                        size={24}
                        background={null}
                        right={15}
                        transition={customTransition}
                        originX={0.5}
                        originY={0.5}
                        animate={{
                            scale: !darkMode ? 0.8 : 1,
                            opacity: !darkMode ? 0 : 1,
                            rotate: !darkMode ? 30 : 0,
                        }}
                        initial={false}
                    >
                        <Icon
                            height={24}
                            width={24}
                            color="#fff"
                            set="feather"
                            icon="moon"
                        />
                    </Frame>

                    <Frame
                        animate={{
                            x: darkMode ? -48 : 0,
                        }}
                        transition={customTransition}
                        initial={false}
                        style={{
                            top: 6,
                            right: 6,
                            width: "40px",
                            height: "40px",
                            backgroundColor: "#ffffff",
                            overflow: "visible",
                            borderRadius: "160px",
                            boxShadow:
                                "0px 6px 25px 0px rgba(0, 0, 0, 0.11), 0px 1px 5px 0px rgba(0, 0, 0, 0.12)",
                        }}
                    />
                </Frame>

                {/* Slider Holder */}
                <Frame
                    animate={{
                        background: darkMode ? "#2e2e2e" : "#f8f8f8",
                    }}
                    transition={customTransition}
                    initial={false}
                    style={{
                        width: "300px",
                        height: "52px",
                        backgroundColor: "#f8f8f8",
                        overflow: "visible",
                        borderRadius: "60px",
                        right: 32,
                        bottom: 32,
                    }}
                >
                    <Frame
                        width={202}
                        height={44}
                        top={4}
                        left={28}
                        background={null}
                    >
                        <HueSlider
                            tint={"rgba(0,0,0,0)"}
                            left={28}
                            knobSize={28}
                            trackHeight={4}
                            width={202}
                            height={44}
                            value={29}
                            max={360}
                            min={0}
                            onValueChange={onHueChange}
                        />
                    </Frame>
                    <Frame
                        animate={{
                            background: darkMode ? "##474747" : "#ffffff",
                        }}
                        transition={customTransition}
                        initial={false}
                        style={{
                            width: "32px",
                            height: "32px",
                            backgroundColor: "#ffffff",
                            borderRadius: "50px",
                            right: 10,
                            top: 10,
                        }}
                    >
                        <Frame
                            center
                            animate={{
                                backgroundColor: accentColor,
                            }}
                            transition={customTransition}
                            initial={false}
                            style={{
                                width: "24px",
                                height: "24px",
                                borderRadius: "40px",
                                boxShadow:
                                    "inset 0px 0px 3px 0px rgba(0, 0, 0, 0.21)",
                            }}
                        ></Frame>
                    </Frame>
                </Frame>
            </Frame>
        </Frame>
    )
}

Controller.defaultProps = {
    width: 776,
    height: 812,
    accentColor: "#FFAA00",
    darkMode: false,
    toggleDarkMode: () => {
        console.warn("No Override Attached to Controller Component")
    },
    setAccentColor: () => {
        console.warn("No Override Attached to Controller Component")
    },
}

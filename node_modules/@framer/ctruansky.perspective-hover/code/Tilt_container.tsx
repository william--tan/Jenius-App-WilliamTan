import * as React from "react"
import { Frame, addPropertyControls, ControlType } from "framer"
import Tilt from "react-tilt"

export function Tilt_container(props) {
    if (props.children === undefined || props.children.length == 0) {
        return (
            <div
                id="chas"
                style={{
                    color: "rgb(187, 102, 204)",
                    background: "rgba(187, 102, 204, 0.2)",
                    width: "100%",
                    height: "100%",
                    display: "flex",
                    justifyContent: "center",
                    alignItems: "center",
                    textAlign: "center",
                    fontSize: "1.1em",
                    border: "1px solid rgb(187, 102, 204)",
                }}
            >
                Connect element.
            </div>
        )
    } else {
        return (
            <Tilt
                className="Tilt"
                options={{
                    max: props.tilt,
                    perspective: props.perspective,
                    scale: props.scale,
                    reset: props.reset,
                    reverse: props.reverse,
                    speed: 300,
                    transition: true,
                    axis: props.tiltAxis,
                }}
                style={{
                    height: "100%",
                    width: "100%",
                    transformStyle: "preserve-3d",
                }}
            >
                {props.children}
            </Tilt>
        )
    }
}

Tilt_container.defaultProps = {
    height: 300,
    width: 200,
}

// Learn more: https://framer.com/api/property-controls/
addPropertyControls(Tilt_container, {
    children: {
        type: ControlType.ComponentInstance,
        title: "Element",
    },
    tilt: {
        type: ControlType.Number,
        defaultValue: 35,
        min: 1,
        max: 50,
        step: 1,
        hidden(props) {
            return props.children === undefined || props.children.length == 0
        },
    },
    perspective: {
        type: ControlType.Number,
        defaultValue: 1000,
        min: 500,
        max: 1500,
        step: 100,
        hidden(props) {
            return props.children === undefined || props.children.length == 0
        },
    },
    scale: {
        type: ControlType.Number,
        defaultValue: 1.1,
        min: 0.1,
        max: 5,
        step: 0.1,
        displayStepper: true,
        hidden(props) {
            return props.children === undefined || props.children.length == 0
        },
    },
    reset: {
        type: ControlType.Boolean,
        title: "Reset",
        defaultValue: true,
        enabledTitle: "Yes",
        disabledTitle: "No",
        hidden(props) {
            return props.children === undefined || props.children.length == 0
        },
    },
    reverse: {
        type: ControlType.Boolean,
        title: "Direction",
        defaultValue: false,
        enabledTitle: "Backward",
        disabledTitle: "Forward",
        hidden(props) {
            return props.children === undefined || props.children.length == 0
        },
    },
    tiltAxis: {
        type: ControlType.Enum,
        defaultValue: "None",
        options: ["null", "x", "y"],
        optionTitles: ["None", "Horizontal", "Vertical"],
        hidden(props) {
            return props.children === undefined || props.children.length == 0
        },
    },
})

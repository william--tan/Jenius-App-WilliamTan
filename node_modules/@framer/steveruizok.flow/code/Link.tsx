import * as React from "react"
import {
    Frame,
    FrameProps,
    addPropertyControls,
    ControlType,
    RenderTarget,
} from "framer"
import { observer } from "mobx-react"
import { showPrevious, showNext } from "./index"

type Props = Partial<FrameProps> & {
    previous?: boolean
    hideOnRoot?: boolean
    target: string
}

const WrappedLink = observer((props: Props) => {
    const { target, previous, hideOnRoot, children, ...rest } = props

    const handleTap = () => {
        if (previous) {
            showPrevious()
        } else {
            showNext(target)
        }
    }

    return (
        <Frame
            {...rest}
            key={`link_${target}`}
            onTap={handleTap}
            color="#8855FF"
            background={children[0] ? "none" : "rgba(136, 85, 255, 0.1)"}
            border={children[0] ? "none" : "1px solid #8855FF"}
            style={{
                fontWeight: 600,
                fontSize: 14,
            }}
            borderRadius={children[0] ? "none" : "2px"}
            opacity={
                RenderTarget.current() !== RenderTarget.canvas &&
                window["flow"].root &&
                previous &&
                hideOnRoot
                    ? 0
                    : 1
            }
        >
            {children[0]
                ? React.cloneElement(children[0], {
                      ...children[0].props,
                      top: 0,
                      left: 0,
                      width: "100%",
                      height: "100%",
                      size: "100%",
                  })
                : previous
                ? "← " + "Previous"
                : target + " →"}
        </Frame>
    )
})

export function Link(props: Props) {
    const { children } = props
    return <WrappedLink {...props} />
}

Link.defaultProps = {
    height: 44,
    width: 200,
    //
    target: "Home",
    previous: false,
    hideOnRoot: true,
}

addPropertyControls(Link, {
    previous: {
        title: "Previous",
        type: ControlType.Boolean,
        defaultValue: false,
    },
    target: {
        title: "Target",
        type: ControlType.String,
        defaultValue: "Home",
        hidden: ({ previous }) => previous,
    },
    hideOnRoot: {
        title: "Hide on Root",
        type: ControlType.Boolean,
        defaultValue: true,
        hidden: ({ previous }) => !previous,
    },
})

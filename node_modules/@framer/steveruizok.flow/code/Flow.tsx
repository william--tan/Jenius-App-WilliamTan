import * as React from "react"
import {
    FrameProps,
    Frame,
    addPropertyControls,
    ControlType,
    useAnimation,
} from "framer"
import { observer } from "mobx-react"

import { FlowState, Page, Transitions, Directions } from "./index"

type Props = Partial<FrameProps> & {
    height: number
    width: number
    pages: React.ReactElement[]
    swipe: boolean
    swipeDistance: number
    unmountHidden: boolean
    onChangePage: (name?: any, position?: number, stack?: number[]) => void
    onSwipeLeft: (...props: any) => void
    onSwipeRight: (...props: any) => void
    onSwipeUp: (...props: any) => void
    onSwipeDown: (...props: any) => void
    onCloseOverlay: (...props: any) => void
    variants: Transitions
}

const FlowComponentWrapped = observer((props: Partial<Props>) => {
    const {
        id,
        pages: iPages,
        swipe,
        swipeDistance,
        unmountHidden,
        onChangePage,
        onSwipeLeft,
        onSwipeRight,
        onSwipeUp,
        onSwipeDown,
        onCloseOverlay,
        variants,
        width,
        height,
        ...rest
    } = props

    /* ---------------------------------- State --------------------------------- */

    const swipeRef = React.useRef({
        x: 0,
        y: 0,
    })

    // Keep a memoized copy of cloned pages
    const pages = React.useMemo(
        () =>
            iPages.map((page, index) =>
                React.cloneElement(page, {
                    ...page.props,
                    key: `page_${index}`,
                    top: 0,
                    left: 0,
                    height: "100%",
                    width: "100%",
                })
            ),
        [iPages]
    )

    // Set initial state from props
    const [state, setState] = React.useState({
        swipeStart: {
            x: 0,
            y: 0,
        },
        direction: "initial",
        stack: [0],
        current: 0,
        position: 0,
        previous: null,
        animating: false,
        transitions: null as Transitions,
    })

    // Change current page when props.current changes
    React.useEffect(() => {
        const flow = window["flow"]
        const { current, position, stack, direction, transitions } = flow
        const { position: previous } = state

        if (position !== previous) {
            onChangePage(current, position, stack)

            setState({
                ...state,
                stack,
                current,
                previous,
                position,
                direction,
                transitions,
                animating: true,
            })
        }
    }, [iPages, window["flow"].position])

    // Create new pages when props.pages changes
    React.useLayoutEffect(() => {
        window["flow"].connect(iPages, 0)
    }, [iPages])

    /* ----------------------------- Event Handlers ----------------------------- */

    const handleSwipeStart = React.useCallback((event, info) => {
        swipeRef.current = info.point
    }, [])

    const handleSwipeEnd = React.useCallback(
        (event, info) => {
            if (!swipe) return

            const flow = window["flow"]
            const { current, position, stack } = flow

            const { x: startX, y: startY } = swipeRef.current
            const { x: endX, y: endY } = info.point

            const offsetY = endY - startY
            const offsetX = endX - startX

            if (Math.abs(offsetY) < swipeDistance) {
                if (offsetX > swipeDistance) {
                    onSwipeLeft(current, position, stack)
                } else if (-offsetX > swipeDistance) {
                    onSwipeRight(current, position, stack)
                }
            }

            if (Math.abs(offsetX) < swipeDistance) {
                if (offsetY > swipeDistance) {
                    onSwipeDown(current, position, stack)
                } else if (-offsetY > swipeDistance) {
                    onSwipeUp(current, position, stack)
                }
            }
        },
        [onSwipeLeft, onSwipeRight, onSwipeDown, onSwipeUp, swipeDistance]
    )

    /* ------------------------------ Presentation ------------------------------ */

    const { stack, current, previous, direction, position, transitions } = state

    // Show default container if user hasn't connected any pages
    if (pages.length === 0) {
        return (
            <DefaultContainer {...rest}>
                <h1>Flow</h1>
                <p>
                    To get started, connect the Frames that you want in your
                    navigation context to this component instance.
                </p>
                <ul>
                    <li>
                        Use the <b>Link</b> component to create links between
                        connected Frames.
                    </li>
                    <li>
                        Use the name of the destination Frame as the Link's{" "}
                        <b>target</b> prop.
                    </li>
                    <li>
                        If you place a <b>Marker</b> component into a Frame, you
                        can also use the name of the Marker as a target.
                    </li>
                </ul>
                <p>
                    See the Store description for more information, including
                    documentation and examples.
                </p>
            </DefaultContainer>
        )
    }

    const animatedVariants = {
        initial: {
            [position]: {
                from: "current",
                to: "current",
            },
        },
        forward: {
            [position]: {
                from: "ahead",
                to: "current",
            },
            [previous]: {
                from: "current",
                to: "behind",
            },
        },
        backward: {
            [position]: {
                from: "behind",
                to: "current",
            },
            [previous]: {
                from: "current",
                to: "ahead",
            },
        },
    }

    return (
        <Frame
            style={{
                height: "100%",
                width: "100%",
                overflow: "hidden",
            }}
            size="100%"
            {...rest}
            background="none"
            overflow="hidden"
            onTapStart={handleSwipeStart}
            onTap={handleSwipeEnd}
        >
            {stack.map((page, index) => {
                let to, from

                const anims = animatedVariants[direction][index]

                if (unmountHidden && index !== position) {
                    return null
                }

                return (
                    <PageContainer
                        key={`page_container_${index}`}
                        index={index}
                        variants={transitions || variants}
                        from={anims && anims.from}
                        to={anims && anims.to}
                        hidden={!anims}
                        onAnimationEnd={() => {
                            if (index === position) {
                                setState({
                                    ...state,
                                    animating: false,
                                })
                            }
                        }}
                    >
                        {pages[page]}
                    </PageContainer>
                )
            })}
        </Frame>
    )
})

export function Flow(props: Partial<Props>) {
    return <FlowComponentWrapped {...props} />
}

// Set our default props
Flow.defaultProps = {
    height: 812,
    width: 375,
    background: "none",
    //
    pages: [],
    swipe: true,
    swipeDistance: 32,
    unmountHidden: false,
    onChangePage: (name, position, stack) => null,
    onSwipeLeft: () => null,
    onSwipeRight: () => null,
    onSwipeUp: () => null,
    onSwipeDown: () => null,
    onCloseOverlay: () => null,
    variants: {
        behind: {
            y: "0%",
            x: "0%",
            opacity: 1,
            filter: "brightness(50%)",
            transition: {
                ease: [0.23, -0.04, 0.31, 1.01],
                duration: 0.36,
            },
        },
        current: {
            y: "0%",
            x: "0%",
            opacity: 1,
            filter: "brightness(100%)",
            transition: {
                ease: [0.23, -0.04, 0.31, 1.01],
                duration: 0.36,
            },
        },
        ahead: {
            y: "0%",
            x: "100%",
            opacity: 1,
            filter: "brightness(100%)",
            transition: {
                ease: [0.23, -0.04, 0.31, 1.01],
                duration: 0.28,
            },
        },
    },
}

// Set our property controls
addPropertyControls(Flow, {
    pages: {
        type: ControlType.Array,
        title: "Pages",
        propertyControl: {
            type: ControlType.ComponentInstance,
        },
    },
})

/* ---------------------------- Default Container --------------------------- */

type DefaultContainerProps = Partial<FrameProps>

// A component for our default container
const DefaultContainer = (props: DefaultContainerProps) => {
    const { children, style, ...rest } = props

    return (
        <Frame
            {...rest}
            style={{
                color: "#8855FF",
                background: "rgba(136, 85, 255, 0.1)",
                overflow: "hidden",
                padding: 16,
                fontSize: 16,
                lineHeight: 1.3,
                textAlign: "left",
                ...style,
            }}
        >
            {children}
        </Frame>
    )
}

/* ---------------------------- Overlay Container --------------------------- */

// An overlay container (tricky business, in progress)
const OverlayContainer = ({
    height,
    width,
    id,
    onCloseOverlay,
    element,
    previous,
    zIndex,
}) => {
    const variants = {
        visible: {
            opacity: 1,
            background: "rgba(0,0,0,.16)",
        },
        hidden: {
            opacity: 0,
            background: "rgba(0,0,0,0)",
        },
    }

    return (
        <Frame
            height={height}
            width={width}
            variants={variants}
            initial="hidden"
            animate="visible"
            key={`scrim_current_${id}`}
            style={{
                display: "flex",
                alignItems: "center",
                justifyContent: "center",
                position: "absolute",
                pointerEvents: previous ? "none" : "all",
                zIndex,
            }}
            overflow="visible"
            onClick={onCloseOverlay}
        >
            <Frame
                height={element.props.height}
                width={element.props.width}
                key={`overlay_${element.props.id}_${id}`}
            >
                {element}
            </Frame>
        </Frame>
    )
}

const PageContainer = props => {
    const { children, index, variants, hidden, from, to } = props

    return (
        <Frame
            size="100%"
            initial={from}
            animate={to}
            variants={variants}
            background="none"
            style={{
                // @ts-ignore
                pointerEvents: hidden ? "none !important" : "all",
                zIndex: index,
            }}
        >
            {children}
        </Frame>
    )
}

import * as React from "react"
import { observable, computed, action, decorate } from "mobx"

export class FlowState {
    current = 0
    position = 0
    direction = "forward"
    root = true
    stack: number[] = [0]
    pages: React.ReactElement[] = []
    overlays: any[] = []

    getIndexOfPageWithPropInDescendants = (prop: string, value: string) => {
        const { pages = [] } = this

        const recursivelySearchForProp = (page: any, component: any) => {
            const { props } = component
            if (props[prop] === value) {
                return page
            }

            if (Array.isArray(props.children)) {
                return props.children.find(c =>
                    recursivelySearchForProp(page, c)
                )
            }

            return false
        }

        const index = pages.indexOf(
            pages.find(p => recursivelySearchForProp(p, p))
        )

        return index < 0 ? null : index
    }

    showPageAtIndex = (
        index: number,
        name: string,
        transitions?: Transitions
    ) => {
        const {
            current: previous,
            position: previousPosition,
            stack,
            pages,
        } = this

        let next = Math.min(Math.max(index, 0), pages.length)

        if (next === previous) return

        const position = previousPosition + 1

        Object.assign(this, {
            direction: "forward",
            overlay: null,
            overlays: [],
            current: name,
            position: position,
            transitions,
            stack: [...stack.slice(0, position), next],
            root: position === 0,
        })
    }

    showNext = (page: string | number, transitions?: Transitions) => {
        const { pages } = this

        if (typeof page === "string") {
            let pageIndex = -1

            const pageWithNameIndex = pages.indexOf(
                pages.find((p, index) => p.props.name === page)
            )

            pageIndex =
                pageWithNameIndex >= 0
                    ? pageWithNameIndex
                    : this.getIndexOfPageWithPropInDescendants("name", page)

            this.showPageAtIndex(pageIndex, page, transitions)
        } else {
            this.showPageAtIndex(page, pages[page].props.name, transitions)
        }
    }

    showPrevious = () => {
        const { stack, pages, position: previousPosition, overlays } = this

        if (overlays.length > 0) {
            // pop from overlays
            const overlay = overlays.pop()
            Object.assign(this, {
                overlay,
                overlays,
                direction: "backward",
            })
        } else {
            const position = previousPosition - 1

            const next = stack[position]
            if (next === undefined) return

            Object.assign(this, {
                direction: "backward",
                position,
                current: pages[next].props.name,
                root: position === 0,
            })
        }
    }

    // startStack = (
    //     page: string | number = this.current,
    //     direction: keyof Directions = "forward"
    // ) => {
    //     const { current: previous, stack, pages } = this

    //     let pageIndex: number

    //     if (typeof page === "string") {
    //         page = this.getIndexOfPageWithPropInDescendants("name", page)
    //         pageIndex =
    //             pageIndex >= 0
    //                 ? pageIndex
    //                 : this.getIndexOfPageWithPropInDescendants(
    //                       "name",
    //                       page as any
    //                   )
    //     }

    //     let current = Math.min(Math.max(pageIndex, 0), pages.length)

    //     Object.assign(this, {
    //         direction,
    //         current,
    //         position: 0,
    //         previous,
    //         stack: [current],
    //         root: true,
    //     })
    // }

    // setRoot = () => {
    //     const { current, pages } = this

    //     let pageIndex = pages[current]

    //     Object.assign(this, {
    //         root: true,
    //         position: 0,
    //         stack: [pageIndex],
    //     })
    // }

    // showRoot = () => {
    //     const {
    //         stack,
    //         current: previous,
    //         pages,
    //         position: previousPosition,
    //         overlays,
    //     } = this

    //     const [first, second] = stack

    //     Object.assign(this, {
    //         direction: "backward",
    //         position: 0,
    //         previous,
    //         current: pages[first].props.name,
    //         root: true,
    //         // stack: [first],
    //     })
    // }

    connect = (pages: any[], current: number) => {
        Object.assign(this, {
            pages,
            current,
        })

        // flow = this
    }
}

decorate(FlowState, {
    current: observable,
    position: observable,
    direction: observable,
    stack: observable,
    root: observable,
    pages: observable,
    // showRoot: action,
    // startStack: action,
    showNext: action,
    showPrevious: action,
    showPageAtIndex: action,
    connect: action,
})

// Globals

window["flow"] = new FlowState()

export const showNext = (page: string | number, transitions?: Transitions) => {
    window["flow"].showNext(page, transitions)
}

export const showPrevious = () => {
    window["flow"].showPrevious()
}

export const setRoot = (root = true) => {
    window["flow"].root = root
}

// export const showRoot = () => {
//     window["flow"].showRoot()
// }

// export const startStack = (page, direction) => {
//     window["flow"].startStack()
// }

// Types

export type Page = React.ReactElement<any> | null

export interface Transitions {
    ahead: { [key: string]: any }
    behind: { [key: string]: any }
    current: { [key: string]: any }
}

export interface Directions {
    forward: string
    backward: string
    initial: string
}

import * as React from "react"
import {
    Frame,
    useCycle,
    PropertyControls,
    ControlType,
    animate,
    RenderTarget,
} from "framer"
import { Mockmatic, MockmaticTemplates } from "./Mockmatic"

// Open Preview (CMD + P)
// API Reference: https://www.framer.com/api

// Define type of property
interface Props {
    frames: []
    duration: number
    animateOn: string
    easing: string
    repeatMode: string
    onProgress: (number) => void
}
var animationFrameID = null

/*
 * Easing Functions - inspired from http://gizma.com/easing/
 * only considering the t value for the range [0, 1] => [0, 1]
 */
var EasingFunctions = {
    // no easing, no acceleration
    linear: function(t) {
        return t
    },
    // accelerating from zero velocity
    easeInQuad: function(t) {
        return t * t
    },
    // decelerating to zero velocity
    easeOutQuad: function(t) {
        return t * (2 - t)
    },
    // acceleration until halfway, then deceleration
    easeInOutQuad: function(t) {
        return t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t
    },
    // accelerating from zero velocity
    easeInCubic: function(t) {
        return t * t * t
    },
    // decelerating to zero velocity
    easeOutCubic: function(t) {
        return --t * t * t + 1
    },
    // acceleration until halfway, then deceleration
    easeInOutCubic: function(t) {
        return t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1
    },
    // accelerating from zero velocity
    easeInQuart: function(t) {
        return t * t * t * t
    },
    // decelerating to zero velocity
    easeOutQuart: function(t) {
        return 1 - --t * t * t * t
    },
    // acceleration until halfway, then deceleration
    easeInOutQuart: function(t) {
        return t < 0.5 ? 8 * t * t * t * t : 1 - 8 * --t * t * t * t
    },
    // accelerating from zero velocity
    easeInQuint: function(t) {
        return t * t * t * t * t
    },
    // decelerating to zero velocity
    easeOutQuint: function(t) {
        return 1 + --t * t * t * t * t
    },
    // acceleration until halfway, then deceleration
    easeInOutQuint: function(t) {
        return t < 0.5 ? 16 * t * t * t * t * t : 1 + 16 * --t * t * t * t * t
    },
}

export class MockmaticAnimator extends React.Component<Props> {
    animatableProps = [
        "deviceX",
        "deviceY",
        "deviceZ",
        "deviceRotationX",
        "deviceRotationY",
        "deviceRotationZ",
        "deviceScale",
        "cameraX",
        "cameraY",
        "cameraZ",
        "cameraFOV",
        "cameraRotationX",
        "cameraRotationY",
        "cameraRotationZ",
        "screenBrightness",
        "screenReflection",
        "screenReflectionBlur",
        "shadowAlpha",
        "shadowX",
        "shadowY",
        "shadowZ",
        "lightingDistance",
        "keyLightAmount",
        "fillLightAmount",
        "backLightAmount",
    ]
    stepAmount: number = 0
    state = {
        percentComplete: 0,
        direction: 1
    }

    static defaultProps: Partial<Props> = {
        frames: [],
        duration: 3.0,
        animateOn: "Load",
        easing: "ease-in-out",
        repeatMode: "off"
    }

    // Items shown in property panel
    static propertyControls: PropertyControls = {
        duration: {
            type: ControlType.Number,
            title: "Duration",
            min: 0,
            max: 10,
            step: 0.01,
        },
        frames: {
            type: ControlType.Array,
            title: "Frames",
            propertyControl: { type: ControlType.ComponentInstance },
        },
        animateOn: {
            options: ["Tap", "Load"],
            title: "Animate On",
            type: ControlType.Enum,
        },
        easing: {
            options: ["linear", "ease-in", "ease-out", "ease-in-out"],
            optionTitles: ["Linear", "Ease In", "Ease Out", "Ease In Out"],
            title: "Curve",
            type: ControlType.Enum,
        },
        repeatMode: {
            options: ["off", "repeat", "loop"],
            optionTitles: ["Off", "From Start", "Auto Reverse"],
            title: "Repeat",
            type: ControlType.Enum,
        },        
    }

    start() {
        let frames = this.props.duration * 60.0
        this.stepAmount = 1.0 / frames
        this.animateStop()
        this.animate()
    }

    animateStop() {
        cancelAnimationFrame(animationFrameID)
    }

    animate() {
        animationFrameID = requestAnimationFrame(this.animate.bind(this))
        this.update()
    }

    update() {
        let perc = this.state.percentComplete
        let newPerc = Math.min(Math.max(perc + (this.stepAmount * this.state.direction), 0.0), 1.0)
        if (newPerc != this.state.percentComplete) {
            this.setState({ ...this.state, percentComplete: newPerc })
            if (this.props.onProgress) {
                this.props.onProgress(newPerc)
            }
        } else if (newPerc == 1.0 || newPerc == 0.0) {
            if (this.props.repeatMode == "repeat") {
                this.setState({...this.state, percentComplete: 0.0})
            } else if (this.props.repeatMode == "loop") {
                this.setState({...this.state, direction: this.state.direction * -1})
            }
        }
    }

    componentWillUnmount() {
        this.animateStop()
    }

    componentDidMount() {
        //console.log('did mount')
        this.setState({ percentComplete: 0 })
        if (this.props.animateOn == "Load" && RenderTarget.current !== RenderTarget.canvas) {
            this.start()
        }
    }

    onTap() {
        if (this.props.animateOn == "Tap") {
            this.start()
        }
    }

    render() {
        let style: React.CSSProperties = {
            width: "100%",
            height: "100%",
        }

        if (this.props.frames.length >= 2) {
            let resultFrame = <span>cant find</span>
            let fromFrame = this.props.frames[0]
            let toFrame = this.props.frames[1]

            if (fromFrame && toFrame) {
                console.log(fromFrame)
                let fromChild = fromFrame.props["children"][0]
                let toChild = toFrame.props["children"][0]
                resultFrame = React.cloneElement(fromChild, {
                    ...this.tweenProps(fromChild, toChild),
                    width: this.props.width,
                    height: this.props.height,
                    position: "Custom",
                    retina: false,
                })
            }
            return (
                <div onClick={this.onTap.bind(this)} style={style}>
                    {resultFrame}
                </div>
            )
        } else {
            return <MockmaticEmpty />
        }
    }

    getProp(child: Mockmatic, propName: string): number {
        var propValue: number = child.props[propName]
        if (child.props.position != "Custom") {
            let template = MockmaticTemplates.positions[child.props.position]
            if (template) {
                if (template.props[propName] != null) {
                    propValue = template.props[propName]
                }
            }
        }
        return propValue
    }

    easeValue(perc) {
        switch (this.props.easing) {
            case "ease-in-out":
                return EasingFunctions.easeInOutQuad(perc)
            case "linear":
                return EasingFunctions.linear(perc)
            case "ease-in":
                return EasingFunctions.easeInQuad(perc)
            case "ease-out":
                return EasingFunctions.easeOutQuad(perc)
        }
    }

    tweenProps(fromChild: Mockmatic, toChild: Mockmatic) {
        let props = {}
        this.animatableProps.forEach(prop => {
            let fromValue = this.getProp(fromChild, prop)
            let toValue = this.getProp(toChild, prop)

            let perc = this.easeValue(this.state.percentComplete)
            let delta: number = toValue - fromValue
            let value: number = fromValue + delta * perc
            props[prop] = value
        })
        return props
    }
}

function MockmaticEmpty() {
    let style: React.CSSProperties = {
        width: "100%",
        height: "100%",
        display: "flex",
        justifyContent: "center",
        alignItems: "center",
        backgroundColor: "rgb(97, 176, 255,0.62)",
        border: "2px solid rgb(97, 176, 255,1.0)",
        color: "black",
        padding: "30px",
        textAlign: "center",
        fontSize: "18pt",
    }
    return (
        <div style={style}>
            <span>Connect two Mockmatic frames to animate</span>
        </div>
    )
}

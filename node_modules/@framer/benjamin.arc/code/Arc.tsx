import * as React from "react"
import { PropertyControls, ControlType } from "framer"

interface Props {
    length: number
    strokeWidth: number
    lineCap: boolean
    isStroke: boolean
    width: number
    height: number
    color: string
    colorTop: string
    colorBottom: string
    angle: number
    isSolid: boolean
    useShadow: boolean
    shadowX: number
    shadowY: number
    shadowBlur: number
    shadowColor: string
}

const angleInRadians = angleInDegrees =>
    (angleInDegrees - 90) * (Math.PI / 180.0)

const polarToCartesian = (centerX, centerY, radius, angleInDegrees) => {
    const a = angleInRadians(angleInDegrees)
    return {
        x: centerX + radius * Math.cos(a),
        y: centerY + radius * Math.sin(a),
    }
}

const arc = (x, y, radius, startAngle, endAngle, isStroke) => {
    const fullCircle = endAngle - startAngle === 360
    const start = polarToCartesian(x, y, radius, endAngle - 0.01)
    const end = polarToCartesian(x, y, radius, startAngle)
    const arcFlag = endAngle - startAngle <= 180 ? "0" : "1"

    let d = [
        "M",
        start.x,
        start.y,
        "A",
        radius,
        radius,
        0,
        arcFlag,
        0,
        end.x,
        end.y,
    ].join(" ")

    if (!isStroke) {
        d = [
            "M",
            start.x,
            start.y,
            "A",
            radius,
            radius,
            0,
            arcFlag,
            0,
            end.x,
            end.y,
            "L",
            x,
            y,
            "L",
            start.x,
            start.y,
        ].join(" ")
    }

    if (fullCircle) d += "z"
    return d
}

export class Arc extends React.Component<Props> {
    static defaultProps = {
        length: 280,
        strokeWidth: 40,
        lineCap: true,
        isStroke: true,
        color: "#09F",
        colorTop: "#09F",
        colorBottom: "#80F",
        angle: 180,
        isSolid: true,
        shadowX: 0,
        shadowY: 2,
        shadowBlur: 4,
        shadowColor: "rgba(0,0,0,0.5)",
        useShadow: false,
    }

    static propertyControls: PropertyControls = {
        isStroke: {
            type: ControlType.Boolean,
            title: "Type",
            enabledTitle: "Stroke",
            disabledTitle: "Fill",
        },
        lineCap: {
            type: ControlType.Boolean,
            title: "Cap",
            hidden(props) {
                return props.isStroke === false
            },
            disabledTitle: "Butt",
            enabledTitle: "Round",
        },
        strokeWidth: {
            type: ControlType.Number,
            title: "Stroke",
            min: 0,
            max: 100,
            hidden(props) {
                return props.isStroke === false
            },
        },
        length: { type: ControlType.Number, title: "Length", min: 0, max: 360 },
        isSolid: {
            type: ControlType.Boolean,
            title: "Fill",
            enabledTitle: "Solid",
            disabledTitle: "Linear",
        },
        color: {
            type: ControlType.Color,
            title: "Color",
            hidden(props) {
                return props.isSolid === false
            },
        },
        colorTop: {
            type: ControlType.Color,
            title: "Top",
            hidden(props) {
                return props.isSolid === true
            },
        },
        colorBottom: {
            type: ControlType.Color,
            title: "Bottom",
            hidden(props) {
                return props.isSolid === true
            },
        },
        angle: {
            type: ControlType.Number,
            title: "Angle",
            min: 0,
            max: 360,
            hidden(props) {
                return props.isSolid === true
            },
        },
        useShadow: {
            type: ControlType.Boolean,
            title: "Shadow",
            enabledTitle: "Show",
            disabledTitle: "Hide",
        },
        shadowX: {
            type: ControlType.Number,
            title: "Shadow X",
            min: 0,
            max: 100,
            displayStepper: true,
            hidden(props) {
                return props.useShadow === false
            },
        },
        shadowY: {
            type: ControlType.Number,
            title: "Shadow Y",
            min: 0,
            max: 100,
            displayStepper: true,
            hidden(props) {
                return props.useShadow === false
            },
        },
        shadowBlur: {
            type: ControlType.Number,
            title: "Shadow B",
            min: 0,
            max: 100,
            hidden(props) {
                return props.useShadow === false
            },
        },
        shadowColor: {
            type: ControlType.Color,
            title: "Shadow C",
            hidden(props) {
                return props.useShadow === false
            },
        },
    }

    render() {
        const {
            width,
            height,
            length,
            strokeWidth,
            lineCap,
            isStroke,
            color,
            angle,
            colorTop,
            colorBottom,
            isSolid,
            shadowX,
            shadowY,
            shadowBlur,
            shadowColor,
            useShadow,
        } = this.props

        const gradientID = `gradient${Math.random()}`
        const currentStroke = isStroke ? strokeWidth : 0
        const currentColor = isSolid ? color : `url(#${gradientID})`

        let anglePI = angle * (Math.PI / 180)
        let currentAngle = {
            x1: Math.round(50 + Math.sin(anglePI) * 50),
            y1: Math.round(50 + Math.cos(anglePI) * 50),
            x2: Math.round(50 + Math.sin(anglePI + Math.PI) * 50),
            y2: Math.round(50 + Math.cos(anglePI + Math.PI) * 50),
        }

        let alphaValueTop = 1
        let alphaValueBottom = 1

        if (colorTop.includes("rgba")) {
            let currentAlpha = 100

            if (colorTop.length > 24) {
                currentAlpha = parseInt(colorTop.substr(colorTop.length - 3, 2))
            } else {
                currentAlpha =
                    parseInt(colorTop.substr(colorTop.length - 2, 2)) * 10
            }

            alphaValueTop = currentAlpha / 100
        }

        if (colorBottom.includes("rgba")) {
            let currentAlpha = 100

            if (colorBottom.length > 24) {
                currentAlpha = parseInt(
                    colorBottom.substr(colorBottom.length - 3, 2)
                )
            } else {
                currentAlpha =
                    parseInt(colorBottom.substr(colorBottom.length - 2, 2)) * 10
            }

            alphaValueBottom = currentAlpha / 100
        }

        const shadowFilter = useShadow
            ? `drop-shadow( ${shadowX}px ${shadowY}px ${shadowBlur}px ${shadowColor})`
            : "none"

        return (
            <svg
                width={width}
                height={height}
                viewBox={`0 0 ${width} ${height}`}
                style={{
                    filter: shadowFilter,
                }}
            >
                <defs>
                    <linearGradient
                        id={gradientID}
                        x1={`${currentAngle.x1}%`}
                        y1={`${currentAngle.y1}%`}
                        x2={`${currentAngle.x2}%`}
                        y2={`${currentAngle.y2}%`}
                    >
                        <stop
                            offset="0%"
                            style={{
                                stopColor: colorTop,
                                stopOpacity: alphaValueTop,
                            }}
                        />
                        <stop
                            offset="100%"
                            style={{
                                stopColor: colorBottom,
                                stopOpacity: alphaValueBottom,
                            }}
                        />
                    </linearGradient>
                </defs>
                <path
                    d={arc(
                        width / 2,
                        height / 2,
                        width / 2 - currentStroke / 2,
                        0,
                        length,
                        isStroke
                    )}
                    fill={isStroke ? "none" : currentColor}
                    stroke={isStroke ? currentColor : "transparent"}
                    strokeWidth={currentStroke}
                    strokeLinecap={lineCap ? "round" : "butt"}
                />
            </svg>
        )
    }
}
